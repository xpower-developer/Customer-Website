{"version":3,"sources":["Components/input-field.jsx","Sites/login.jsx","Sites/sign-up.jsx","Sitelayouts/login-site.jsx","Sitelayouts/default-site.jsx","serviceWorker.js","index.js","App.js","img/logo-removebg-preview.png"],"names":["InputField","labelText","labelName","className","id","type","Login","src","Logo","style","fontSize","to","SignUp","Button","onClick","text","console","log","LoginSite","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"wTAEe,SAASA,EAAT,GAA+C,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UAC9C,OACE,6BACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,0BAAMC,GAAIF,EAAWC,UAAU,eAC5BF,KAIP,yBAAKE,UAAU,OACb,yBAAKA,UAAU,cACb,2BAAOE,KAAK,OAAOD,GAAIF,EAAWC,UAAU,YAGhD,yBAAKA,UAAU,SCZN,SAASG,IACtB,OACE,yBAAKH,UAAU,cACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKI,IAAKC,QAGd,kBAACR,EAAD,CAAYC,UAAU,WAAWC,UAAU,aAC3C,kBAACF,EAAD,CAAYC,UAAU,WAAWC,UAAU,aAC3C,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMM,MAAO,CAAEC,SAAU,KAAzB,yBACwB,kBAAC,IAAD,CAAMC,GAAG,YAAT,aAG1B,yBAAKR,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,6BAA6BQ,GAAG,SAAhD,Y,YChBK,SAASC,IACtB,OACE,yBAAKT,UAAU,cACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKI,IAAKC,QAGd,yBAAKL,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACH,EAAD,CAAYC,UAAU,YAAYC,UAAU,eAE9C,yBAAKC,UAAU,aACb,kBAACH,EAAD,CAAYC,UAAU,WAAWC,UAAU,eAG/C,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACH,EAAD,CAAYC,UAAU,WAAWC,UAAU,cAE7C,yBAAKC,UAAU,aACb,kBAACH,EAAD,CAAYC,UAAU,WAAWC,UAAU,eAG/C,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,kBAACH,EAAD,CAAYC,UAAU,QAAQC,UAAU,YAG5C,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMM,MAAO,CAAEC,SAAU,KAAzB,4BAC2B,kBAAC,IAAD,CAAMC,GAAG,KAAT,aAG7B,yBAAKR,UAAU,aACb,kBAACU,EAAA,EAAD,CAAQC,QAAS,kBAOPC,EAPwB,mBAQ1CC,QAAQC,IAAIF,GADd,IAAoBA,QC3CL,SAASG,IACtB,OACE,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAK,YACV,kBAACP,EAAD,OAEF,kBAAC,IAAD,CAAOO,KAAK,KACV,kBAACb,EAAD,aCfH,SAASY,IACtB,OACE,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,wCAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,sCAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,yCAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,yCCXUiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,mBCHD,WACb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAACD,EAAD,YDNI,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a,kBGzI5BC,EAAOC,QAAU,IAA0B,oD","file":"static/js/main.06e0009d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default function InputField({ labelText, labelName }) {\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <span id={labelName} className=\"input-label\">\r\n            {labelText}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <input type=\"text\" id={labelName} className=\"w-100\"></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"m-4\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport Logo from \"../img/logo-removebg-preview.png\";\r\nimport InputField from \"../Components/input-field\";\r\n\r\nexport default function Login() {\r\n  return (\r\n    <div className=\"center-div\">\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <img src={Logo}></img>\r\n        </div>\r\n      </div>\r\n      <InputField labelText=\"USERNAME\" labelName=\"Username\" />\r\n      <InputField labelText=\"PASSWORD\" labelName=\"Password\" />\r\n      <div className=\"row\">\r\n        <div className=\"col col-8\">\r\n          <span style={{ fontSize: 13 }}>\r\n            Dont have an account? <Link to=\"/sign-up\">Sign Up</Link>\r\n          </span>\r\n        </div>\r\n        <div className=\"col col-4\">\r\n          <Link className=\"btn btn-purple float-right\" to=\"/home\">\r\n            Login\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport Logo from \"../img/logo-removebg-preview.png\";\r\nimport InputField from \"../Components/input-field\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport default function SignUp() {\r\n  return (\r\n    <div className=\"center-div\">\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <img src={Logo}></img>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-6\">\r\n          <InputField labelText=\"FIRSTNAME\" labelName=\"FirstName\" />\r\n        </div>\r\n        <div className=\"col col-6\">\r\n          <InputField labelText=\"LASTNAME\" labelName=\"LastName\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-6\">\r\n          <InputField labelText=\"USERNAME\" labelName=\"Username\" />\r\n        </div>\r\n        <div className=\"col col-6\">\r\n          <InputField labelText=\"PASSWORD\" labelName=\"Password\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <InputField labelText=\"EMAIL\" labelName=\"Email\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-8\">\r\n          <span style={{ fontSize: 13 }}>\r\n            Already have an account? <Link to=\"/\">Sign In</Link>\r\n          </span>\r\n        </div>\r\n        <div className=\"col col-4\">\r\n          <Button onClick={() => CreateUser(\"Test actoin\")} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CreateUser(text) {\r\n  console.log(text);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../Stylesheets/login-site.css\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Login from \"../Sites/login\";\r\nimport SignUp from \"../Sites/sign-up\";\r\n\r\nexport default function LoginSite() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <Router>\r\n            <div>\r\n              <Switch>\r\n                <Route path=\"/sign-up\">\r\n                  <SignUp />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  <Login />\r\n                </Route>\r\n              </Switch>\r\n            </div>\r\n          </Router>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nexport default function LoginSite() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <h1>HEADER</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <h1>MENU</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <h1>CONTENT</h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col col-12\">\r\n          <h1>FOOTER</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Stylesheets/reusable.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport LoginSite from \"./Sitelayouts/login-site\";\nimport DefaultSite from \"./Sitelayouts/default-site\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/home\">\n            <DefaultSite />\n          </Route>\n          <Route path=\"/\">\n            <LoginSite />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo-removebg-preview.b7460520.png\";"],"sourceRoot":""}